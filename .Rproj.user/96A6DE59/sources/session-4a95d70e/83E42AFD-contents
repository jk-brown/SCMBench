---
title: "Fitting distribution to S20 ECS data"
output: github_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Goal 

The goal of this script is to fit and easy to sample parametric distribution to the ECS values provided in S20. We will then sample the distributions, save the data, and visualize them.

## Source all setup, mapping, and helper functions stored in `sourced`
```{r}
source("sourced/source_all.R")
```

# Fit Distribution to Sherwood et al. 2020 data 

We use `fitdistr()` (function in the `MASS` package) to maximize the likelihood of distribution hyper-parameters for each ECS configuration data set. Using this method makes it easier to propose, sample, and reproduce distributions for S20 evidence configurations, but makes the assumption that ECS follows a gamma distribution. 

The goal of this method is to reproduce an easy to sample likelihood distribution that has similar peak and spread as the distributions presented in S20 for each evidence configuration. The result of `fitdistr()` is the optimal `shape` and `rate` hyper-parameters of the gamma distributions for each evidence configuration. These distribution hyper-parameters are then used to sample the proposed parametric likelihood distribution with `rlgamma()`. Thus, we are attempting to produce data samples that characterize the uncertainty of ECS from different evidence configurations. In a future step the uncertainty will be propagated through `hector` simulations using `matilda`.

Some notes on `fitdistr()` usage: The function fits a maximum likelihood distribution to each element in the data list. It is possible to manipulate it in several ways. In and effort to minimize bias I do not make extraneous changes to the resulting distribution.

```{r}
# read in the ecs_data and store as a list 
ecs_data <- readRDS("data/ecs_prior_data_S20.RDS")

```

Produce the rate and shape hyper-parameters for the gamma distributions for each element in `ecs_data_list`.

`lapply()` will run `fitdistr()` with the gamma density function (`densfun`) for each element in `ecs_data_list`:

```{r}
hyper_param_list <- lapply(ecs_data, 
                           fitdistr, 
                           densfun = "gamma")

```

The result from the code is a new list (`hyper_param_list`) of estimated `rate` and `shape` parameters of a gamma distribution for each evidence configuration.

# Sample Distributions

We obtain a sample of ECS values for each evidence configuration using the hyper-parameters produced by applying a gamma distribution likelihood fit using the S20 ECS percentiles for each evidence configuration.   

We produce `n = 10000` samples for each of the evidence configurations using `rgamma` with the `shape` and `rate` hyper-parameters stored in `hyper_param_list`.

```{r, results='hide'}
# set seed for reproducible results
set.seed(1001)

# set n value - how many ECS samples produced for each evidence configuration
n = 10000

# The shape and rate parameters are retrieved from each element (referred to as 'evidence') and 
# used as inputs for rgamma.
ecs_sample_list <- lapply(hyper_param_list, function(evidence) {
  data.frame(ECS = rgamma(n,
                          shape = evidence$estimate["shape"],
                          rate = evidence$estimate["rate"]))
  
})

```

The result is a new list (`ecs_sample_list`) of data frames, one for each evidence scenario, that contains a vector of ECS values sampled from respective gamma distributions. 

# Visualize Simulated Samples

Once the ECS samples are produced and stored in a list of data frames (`ecs_sample_list`), we visualize the sample distribution with `ggplot2`.

Before working in `ggplot2`, we build a single data frame with all samples and the name of the evidence configurations fro each sample to make it easier to plot. 

We complete this by creating a new data frame `ecs_samples_df` from elements in `ecs_sample_list`. 

In the data frame `value` contains the unlisted ECS samples from `ecs_sample_list`. This combines the vectors of each element in `ecs_sample_list` into a single vector under the `value` column.
The `evidence` column repeats names of each element in `ecs_sample_list` `n` times. Note: `n` is set to 15,000 for each evidence combination. We remove row names to ensure a clean result.

```{r}
ecs_sample_df <- data.frame(
  
  value = unlist(ecs_sample_list),
  evidence = rep(names(ecs_sample_list), each = n),
  row.names = NULL
  
)
```

The result is a data frame that combines ECS values sampled from gamma distributions for each evidence configuration (15,000 samples x 5 evidence scenarios = 75,000 rows). Each row is labeled with the name of the evidence configuration the value belongs to.   

Plot ECS samples as a`geom_density` with faceted by `evidence`. We use `geom_density()` to plot with desired scale (`scale_x_continuous`) and facet figure by `evidence` (evidence configuration name) to produce a multi-pane figure. 

```{r}
ggplot() +
  geom_density(data = ecs_sample_df,
               aes(x = value, 
                   color = evidence)) +
  theme_light() +
  scale_x_continuous(breaks = seq(from = 0, to = 9, 
                                  by = 1)) +
  facet_wrap(~ evidence)

```

Compute comparison of quantile values for the proportions published in the 

```{r}

quantile(ecs_sample_list$Baseline$ECS, probs = c(0.05,0.50, 0.95))
quantile(ecs_sample_list$No_Process$ECS, probs = c(0.05,0.50, 0.95))
quantile(ecs_sample_list$No_Historical$ECS, probs = c(0.05,0.50, 0.95))
quantile(ecs_sample_list$No_Paleoclimate$ECS, probs = c(0.05,0.50, 0.95))
quantile(ecs_sample_list$Baseline_Emergent_constraints$ECS, probs = c(0.05,0.50, 0.95))

```

# Optimize Skew Normal Distribution Hyperparameter for IPCC ECS Range

Here we want to determine the optimal distribution hyperparameters for a skew normal distribution that meets specified quantile requirements. For this task we utilize the `sn` and `optimx` packages. The objective it to fit a skew normal distribution such that at quantile 5%, 50%, and 95% reflect IPCC ECS range (3, 2-5).

## Define objective function

We define an objective function to quantify the deviation of the quantiles for the skew normal distribution from the desired IPCC values. This function is stored in `sourced/helper_functions.R`. 

Here, the hyperparameters (`xi`, `omega`, and `alpha`) represent the location, scale, and shape of the skew normal distribution, respectively. The function computes quantiles for the 5th, 50th, and 95th percentiles from the skew normal distribution provided initial hyperparameters (`qsn()`). It then compares these values to the targeted IPCC values (3.0, 2.0-5.0) by calculating squared differences. This approach allows us to determine how well the hyperparameters of the skew normal distribution align with the desired percentiles.

## Optimize hyperparameters

We used the `optimx` function to minimize the error calculated by the objective function. The initial hyperparameters were set to $\xi$ = 3, $\omega$ = 1, and $\alpha$ = 0

```{r}
# Initial params for xi, omega, and alpha
initial_params <- c(3, 1, 0)

# Perform the optimization
optimized <- optimx(par = initial_params, 
                    fn = objective_function, 
                    method = "L-BFGS-B")

# Check the result
print(optimized)

```

These initial values can be justified as a neutral, reasonable starting point for optimization. They are simple, unbiased choices that reflect the basic assumptions about the central tendency, spread, and symmetry. 

The chosen $\xi$ value is based on the desired median ECS value of 3.0 - this makes it the best initial value for the location parameter in an attempt to replicate the IPCC distribution. An initial $\omega$ = 1 is used as a neutral starting point for the spread of the distribution. An initial $\alpha$ = 0 implies a symmetric distribution, we use this to assume that the skewness of the distribution is unknown. 

## Extract optimal parameters

After the optimization step we extract the optimal parameters (hyperparameters that minimized the the objective function) from the result.

```{r}
# Extract the optimal parameters
optimal_params <- optimized[ ,1:3]
optimal_xi <- optimal_params[1]
optimal_omega <- optimal_params[2]
optimal_alpha <- optimal_params[3]

print(optimal_params)

```

## Generate the Skew Normal Distribution

Using the optimal hyperparameters we call the `rsn()` function to sample values (n = 10000) to sample from the optimized skew normal distribution. 

```{r}
xi <- optimal_xi$p1
omega <- optimal_omega$p2
alpha <- optimal_alpha$p3

set.seed(123)
data <- rsn(n = 10000, xi = xi, omega = omega, alpha = alpha)

```

With a sample from the skew normal distribution in hand we can calculate quantile values to see how the distribution aligns with IPCC expectation:

```{r}
# Calculate the quantiles
very_likely <- quantile(data, probs = c(0.05, 0.5, 0.95))
likely <- quantile(data, probs = c(0.33, 0.66))

# Print the results
print(very_likely)
print(likely)

```
Here we can see that the very likely distribution aligns exactly with the IPCC expectation. However, the likely range is slightly more constrained that what has been proposed by IPCC AR6.

## preliminary visualization of the distribution
```{r}
# convert the data to data frame
IPCC_est_df <- data.frame(ECS = data)

# create histogram with density plot
ECS_sn <- 
  ggplot(IPCC_est_df) +
   geom_density(stat = "function", fun = dsn, args = list(xi, omega, alpha), xlim = c(0, 8), color = "black", linewidth = 0.7) +
  theme_light() +
  scale_x_continuous(limits = c(min(IPCC_est_df$ECS) - 1, max(IPCC_est_df$ECS) + 1),
                     breaks = seq(from =0, to = 8, by = 1))+
  geom_area(stat = "function", fun = dsn, args = list(xi = xi, omega = omega, alpha = alpha),
            xlim = c(2.0, 5.0), fill = "#F21A00", alpha = 0.5) +  # Shade area between 2.0 and 5.0
  geom_area(stat = "function", fun = dsn, args = list(xi = xi, omega = omega, alpha = alpha),
            xlim = c(2.6, 3.43), fill = "#F21A00", alpha = 0.7) +
  geom_area(stat = "function", fun = dsn, args = list(xi = xi, omega = omega, alpha = alpha),
            xlim = c(3.0, 3.01), fill = "black", alpha = 0.5)


ECS_sn
```

## Add the IPCC AR6 distribution value to ECS sample list
```{r}
# add estimated IPCC ECS values to ecs_sample_list 
ecs_sample_list[["IPCC"]] <- IPCC_est_df

# save data for supplemental figure script
saveRDS(ecs_sample_list, "data/initial_ecs_samples_from_gamma_dist.RDS")

# save data for supplemental figure script
saveRDS(ecs_sample_list, "data/ecs_samples_plot_data.RDS")

```

